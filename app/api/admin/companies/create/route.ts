import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// Templates de dados iniciais por tipo de neg√≥cio
const INITIAL_DATA_TEMPLATES = {
  B2B: {
    personas: [
      {
        business_type: 'B2B',
        job_title: 'Diretor Comercial',
        company_type: 'Empresa de m√©dio porte (50-200 funcion√°rios)',
        context: 'Respons√°vel por expandir vendas e melhorar processos comerciais',
        company_goals: 'Aumentar faturamento em 30% e reduzir ciclo de vendas',
        business_challenges: 'Equipe desmotivada, processos manuais, falta de previsibilidade',
        prior_knowledge: 'J√° ouviu falar de solu√ß√µes similares mas nunca testou'
      },
      {
        business_type: 'B2B',
        job_title: 'Gerente de TI',
        company_type: 'Startup em crescimento',
        context: 'Busca ferramentas para escalar opera√ß√µes com seguran√ßa',
        company_goals: 'Automatizar processos e garantir conformidade',
        business_challenges: 'Or√ßamento limitado, equipe pequena, muitas demandas',
        prior_knowledge: 'Conhece bem tecnologia mas precisa de ROI claro'
      }
    ],
    objections: [
      {
        name: '√â muito caro para nosso or√ßamento atual',
        rebuttals: [
          'Mostre o ROI em economia de tempo e recursos',
          'Ofere√ßa um plano de entrada com upgrade futuro',
          'Compare com o custo de n√£o resolver o problema'
        ]
      },
      {
        name: 'J√° temos um fornecedor/solu√ß√£o',
        rebuttals: [
          'Foque nos diferenciais √∫nicos da sua solu√ß√£o',
          'Sugira um teste paralelo sem compromisso',
          'Mostre cases de migra√ß√£o bem-sucedida'
        ]
      },
      {
        name: 'Preciso da aprova√ß√£o da diretoria',
        rebuttals: [
          'Ofere√ßa material para apresenta√ß√£o executiva',
          'Proponha uma reuni√£o com a diretoria',
          'Forne√ßa ROI e m√©tricas que importam para C-level'
        ]
      },
      {
        name: 'N√£o √© o momento certo',
        rebuttals: [
          'Explore o custo da ina√ß√£o',
          'Mostre benef√≠cios imediatos mesmo com implementa√ß√£o gradual',
          'Ofere√ßa condi√ß√µes especiais por tempo limitado'
        ]
      }
    ]
  },
  B2C: {
    personas: [
      {
        business_type: 'B2C',
        profession: 'Profissional Liberal',
        context: 'Trabalha por conta pr√≥pria e busca praticidade',
        what_seeks: 'Solu√ß√µes que economizem tempo e sejam f√°ceis de usar',
        main_pains: 'Falta de tempo, muitas tarefas manuais, dificuldade com tecnologia',
        prior_knowledge: 'Usa ferramentas b√°sicas mas quer algo mais completo'
      },
      {
        business_type: 'B2C',
        profession: 'Estudante Universit√°rio',
        context: 'Or√ßamento limitado mas abra√ßa tecnologia',
        what_seeks: 'Produtos com bom custo-benef√≠cio e que agreguem valor',
        main_pains: 'Pre√ßo alto, produtos complicados, falta de suporte',
        prior_knowledge: 'Pesquisa muito antes de comprar, l√™ reviews'
      }
    ],
    objections: [
      {
        name: 'N√£o confio em comprar online',
        rebuttals: [
          'Mostre selos de seguran√ßa e certifica√ß√µes',
          'Compartilhe depoimentos de clientes reais',
          'Ofere√ßa garantia de devolu√ß√£o'
        ]
      },
      {
        name: '√â muito caro',
        rebuttals: [
          'Divida em parcelas sem juros',
          'Compare com alternativas mais caras',
          'Mostre o valor agregado al√©m do pre√ßo'
        ]
      },
      {
        name: 'Preciso pensar melhor',
        rebuttals: [
          'Crie senso de urg√™ncia com oferta limitada',
          'Ofere√ßa um trial ou amostra',
          'Agende um follow-up para tirar d√∫vidas'
        ]
      },
      {
        name: 'N√£o vejo valor nisso',
        rebuttals: [
          'Conecte com as dores espec√≠ficas do cliente',
          'Mostre resultados de pessoas similares',
          'Fa√ßa uma demonstra√ß√£o pr√°tica'
        ]
      }
    ]
  }
}

export async function POST(request: NextRequest) {
  try {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

    if (!serviceRoleKey) {
      console.error('SUPABASE_SERVICE_ROLE_KEY n√£o configurada')
      return NextResponse.json(
        { error: 'Configura√ß√£o do servidor incompleta' },
        { status: 500 }
      )
    }

    // Cliente com service role para opera√ß√µes administrativas
    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })

    // Receber dados do corpo da requisi√ß√£o
    const body = await request.json()
    const {
      companyName,
      subdomain,
      adminName,
      adminEmail,
      adminPassword,
      businessType
    } = body

    // Valida√ß√µes
    if (!companyName || !subdomain || !adminName || !adminEmail || !adminPassword || !businessType) {
      return NextResponse.json(
        { error: 'Todos os campos s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }

    // Verificar se subdom√≠nio j√° existe
    const { data: existingCompany } = await supabaseAdmin
      .from('companies')
      .select('id')
      .eq('subdomain', subdomain)
      .single()

    if (existingCompany) {
      return NextResponse.json(
        { error: 'Subdom√≠nio j√° est√° em uso' },
        { status: 400 }
      )
    }

    console.log(`üì¶ Criando empresa: ${companyName} (${subdomain})`)

    // 1. Criar empresa
    const { data: company, error: companyError } = await supabaseAdmin
      .from('companies')
      .insert({
        name: companyName,
        subdomain: subdomain
      })
      .select()
      .single()

    if (companyError) {
      console.error('Erro ao criar empresa:', companyError)
      throw companyError
    }

    console.log(`‚úÖ Empresa criada: ${company.id}`)

    // 2. Criar usu√°rio admin no Auth
    const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.createUser({
      email: adminEmail,
      password: adminPassword,
      email_confirm: true,
      user_metadata: {
        name: adminName
      }
    })

    if (authError) {
      // Reverter cria√ß√£o da empresa
      await supabaseAdmin.from('companies').delete().eq('id', company.id)
      console.error('Erro ao criar usu√°rio:', authError)
      throw authError
    }

    console.log(`‚úÖ Usu√°rio criado: ${authUser.user.id}`)

    // 3. Criar registro na tabela employees
    const { error: employeeError } = await supabaseAdmin
      .from('employees')
      .insert({
        name: adminName,
        email: adminEmail,
        role: 'admin',
        user_id: authUser.user.id,
        company_id: company.id
      })

    if (employeeError) {
      // Reverter cria√ß√µes anteriores
      await supabaseAdmin.auth.admin.deleteUser(authUser.user.id)
      await supabaseAdmin.from('companies').delete().eq('id', company.id)
      console.error('Erro ao criar employee:', employeeError)
      throw employeeError
    }

    console.log(`‚úÖ Employee criado`)

    // 4. Criar company_type
    const { error: typeError } = await supabaseAdmin
      .from('company_type')
      .insert({
        company_id: company.id,
        name: businessType
      })

    if (typeError) {
      console.error('Erro ao criar company_type:', typeError)
      // N√£o reverter, continuar sem company_type
    } else {
      console.log(`‚úÖ Company type criado: ${businessType}`)
    }

    // 5. Inserir personas template
    const templates = INITIAL_DATA_TEMPLATES[businessType as keyof typeof INITIAL_DATA_TEMPLATES]

    if (templates) {
      // Inserir personas
      const personasToInsert = templates.personas.map(p => ({
        ...p,
        company_id: company.id
      }))

      const { error: personasError } = await supabaseAdmin
        .from('personas')
        .insert(personasToInsert)

      if (personasError) {
        console.error('Erro ao criar personas:', personasError)
      } else {
        console.log(`‚úÖ ${personasToInsert.length} personas criadas`)
      }

      // Inserir obje√ß√µes
      const objectionsToInsert = templates.objections.map(o => ({
        ...o,
        company_id: company.id
      }))

      const { error: objectionsError } = await supabaseAdmin
        .from('objections')
        .insert(objectionsToInsert)

      if (objectionsError) {
        console.error('Erro ao criar obje√ß√µes:', objectionsError)
      } else {
        console.log(`‚úÖ ${objectionsToInsert.length} obje√ß√µes criadas`)
      }
    }

    // 6. Criar company_data inicial
    const { error: companyDataError } = await supabaseAdmin
      .from('company_data')
      .insert({
        company_id: company.id,
        nome: companyName,
        descricao: `${companyName} √© uma empresa focada em excel√™ncia e inova√ß√£o.`,
        produtos_servicos: 'Produtos e servi√ßos diversos para atender √†s necessidades do mercado.',
        funcao_produtos: 'Resolver problemas e agregar valor aos clientes.',
        diferenciais: 'Qualidade, inova√ß√£o e atendimento personalizado.',
        concorrentes: 'Diversos players do mercado.',
        dados_metricas: 'M√©tricas de sucesso e crescimento constante.',
        erros_comuns: 'Evitamos erros comuns atrav√©s de processos bem definidos.',
        percepcao_desejada: 'Ser reconhecida como refer√™ncia em qualidade e inova√ß√£o.'
      })

    if (companyDataError) {
      console.error('Erro ao criar company_data:', companyDataError)
    } else {
      console.log(`‚úÖ Company data criada`)
    }

    // Retornar sucesso
    return NextResponse.json({
      success: true,
      company: {
        id: company.id,
        name: company.name,
        subdomain: company.subdomain
      },
      admin: {
        id: authUser.user.id,
        email: adminEmail,
        name: adminName
      },
      message: `Empresa "${companyName}" criada com sucesso!`,
      urls: {
        local: `http://${subdomain}.ramppy.local:3000`,
        production: `https://${subdomain}.ramppy.site`
      }
    })

  } catch (error: any) {
    console.error('Erro ao criar empresa:', error)
    return NextResponse.json(
      { error: error.message || 'Erro ao criar empresa' },
      { status: 500 }
    )
  }
}